// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  userType     UserType @map("user_type")
  avatarUrl    String?  @map("avatar_url")
  bio          String?
  hourlyRate   Float? @map("hourly_rate")
  subjects     String[] // Array of subjects for tutors
  timezone     String   @default("UTC")
  isVerified   Boolean  @default(false) @map("is_verified")
  isActive     Boolean  @default(true) @map("is_active")
  verificationToken String? @unique
  verificationTokenExpires DateTime?
  resetToken String? @unique
  resetTokenExpires DateTime?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  classesCreated    Class[]
  bookingsAsStudent Booking[] @relation("StudentBookings")
  bookingsAsTutor   Booking[] @relation("TutorBookings")
  sessionsAsTutor   Session[] @relation("TutorSessions")
  sessionsAsStudent Session[] @relation("StudentSessions")
  messagesSent      Message[] @relation("SentMessages")
  messagesReceived  Message[] @relation("ReceivedMessages")
  materials         Material[]
  enrollments       Enrollment[]
  notifications     Notification[]
  bookingLinks      BookingLink[]
  availabilities    Availability[]
  rescheduleRequests RescheduleRequest[]

  @@map("users")
}

model Class {
  id              String   @id @default(uuid())
  tutorId         String   @map("tutor_id")
  title           String
  description     String?
  subject         String
  level           String?
  maxStudents     Int      @default(1) @map("max_students")
  durationMinutes Int      @map("duration_minutes")
  pricePerSession Float  @map("price_per_session")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tutor       User         @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  sessions    Session[]
  materials   Material[]
  enrollments Enrollment[]
  bookingLinks BookingLink[]

  @@map("classes")
}

model Booking {
  id              String        @id @default(uuid())
  studentId       String        @map("student_id")
  classId         String        @map("class_id")
  tutorId         String        @map("tutor_id") // <-- Added for permission checks
  scheduledAt     DateTime      @map("scheduled_at")
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  paymentIntentId String?       @map("payment_intent_id")
  totalAmount     Float         @map("total_amount")
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  student  User      @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  tutor    User      @relation("TutorBookings", fields: [tutorId], references: [id], onDelete: Cascade) // <-- Added relation
  sessions Session[]
  rescheduleRequests RescheduleRequest[]

  @@map("bookings")
}

model Session {
  id              String        @id @default(uuid())
  bookingId       String        @map("booking_id")
  tutorId         String        @map("tutor_id")
  studentId       String        @map("student_id")
  classId         String        @map("class_id")
  startedAt       DateTime?     @map("started_at")
  endedAt         DateTime?     @map("ended_at")
  durationMinutes Int?          @map("duration_minutes")
  status          SessionStatus @default(SCHEDULED)
  meetingUrl      String?       @map("meeting_url")
  recordingUrl    String?       @map("recording_url")
  notes           String?
  rating          Int?
  review          String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  booking  Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tutor    User      @relation("TutorSessions", fields: [tutorId], references: [id], onDelete: Cascade)
  student  User      @relation("StudentSessions", fields: [studentId], references: [id], onDelete: Cascade)
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("sessions")
}

model Message {
  id           String      @id @default(uuid())
  senderId     String      @map("sender_id")
  recipientId  String      @map("recipient_id")
  sessionId    String?     @map("session_id")
  content      String
  messageType  MessageType @default(TEXT) @map("message_type")
  fileUrl      String?     @map("file_url")
  fileName     String?     @map("file_name")
  fileSize     Int?        @map("file_size")
  isRead       Boolean     @default(false) @map("is_read")
  createdAt    DateTime    @default(now()) @map("created_at")

  // Relations
  sender    User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User    @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Material {
  id           String   @id @default(uuid())
  tutorId      String   @map("tutor_id")
  classId      String?  @map("class_id")
  title        String
  description  String?
  fileUrl      String   @map("file_url")
  fileName     String   @map("file_name")
  fileSize     Int      @map("file_size")
  fileType     String   @map("file_type")
  isPublic     Boolean  @default(false) @map("is_public")
  downloadCount Int     @default(0) @map("download_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  tutor User  @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  class Class? @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("materials")
}

model Enrollment {
  id        String           @id @default(uuid())
  studentId String           @map("student_id")
  classId   String           @map("class_id")
  enrolledAt DateTime        @default(now()) @map("enrolled_at")
  status    EnrollmentStatus @default(ACTIVE)

  // Relations
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("enrollments")
}

model Notification {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  title             String
  message           String
  type              String
  isRead            Boolean  @default(false) @map("is_read")
  relatedEntityType String?  @map("related_entity_type")
  relatedEntityId   String?  @map("related_entity_id")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model BookingLink {
  id        String   @id @default(uuid())
  token     String   @unique
  tutorId   String   @map("tutor_id")
  classId   String   @map("class_id")
  expiresAt DateTime @map("expires_at")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  tutor User  @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("booking_links")
}

model Availability {
  id        String   @id @default(uuid())
  tutorId   String
  dayOfWeek Int      // 0=Sunday, 6=Saturday
  startTime String   // "09:00"
  endTime   String   // "12:00"
  timezone  String   // e.g., "America/New_York"
  bufferMinutes Int? // Buffer between sessions in minutes
  tutor     User     @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@map("availabilities")
}

model RescheduleRequest {
  id            String   @id @default(uuid())
  bookingId     String
  booking       Booking  @relation(fields: [bookingId], references: [id])
  requestedById String
  requestedBy   User     @relation(fields: [requestedById], references: [id])
  proposedTime  DateTime
  status        RescheduleStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Enums
enum UserType {
  tutor
  student
  admin
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum PaymentStatus {
  pending
  paid
  refunded
}

enum SessionStatus {
  scheduled
  in_progress
  completed
  cancelled
}

enum MessageType {
  text
  file
  image
  system
}

enum EnrollmentStatus {
  active
  completed
  dropped
}

enum RescheduleStatus {
  pending
  accepted
  declined
  cancelled
} 